//
// Generated file, do not edit! Created by opp_msgc 4.2 from src/linklayer/ARPPathSwitch/PathRepair.msg.
//

#ifndef _PATHREPAIR_M_H_
#define _PATHREPAIR_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0402
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include <vector>
#include <sys/types.h>
#include "EtherFrame_m.h"
#include "MACAddress.h"
typedef std::vector<MACAddress> MACAddressVector;
// }}



/**
 * Enum generated from <tt>src/linklayer/ARPPathSwitch/PathRepair.msg</tt> by opp_msgc.
 * <pre>
 * enum RepairMessageType 
 * { 
 *     Hello = 1; 			
 *     PathFail = 2; 		
 *     PathRequest = 3; 	
 *     PathReply = 4;		
 *     LinkFail = 5;		
 *     LinkReply = 6;		
 * }
 * </pre>
 */
enum RepairMessageType {
    Hello = 1,
    PathFail = 2,
    PathRequest = 3,
    PathReply = 4,
    LinkFail = 5,
    LinkReply = 6
};

/**
 * Class generated from <tt>src/linklayer/ARPPathSwitch/PathRepair.msg</tt> by opp_msgc.
 * <pre>
 * message PathRepair extends EtherFrame 
 * {
 *     int type enum(RepairMessageType);		
 *     MACAddress srcMACAddress;				
 *     MACAddress destMACAddress;				
 * 	simtime_t repairTime;					
 * 	MACAddress repairSwitch;				
 * 	MACAddressVector repairMACAddresses;	
 * }
 * </pre>
 */
class PathRepair : public ::EtherFrame
{
  protected:
    int type_var;
    MACAddress srcMACAddress_var;
    MACAddress destMACAddress_var;
    simtime_t repairTime_var;
    MACAddress repairSwitch_var;
    MACAddressVector repairMACAddresses_var;

  private:
    void copy(const PathRepair& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const PathRepair&);

  public:
    PathRepair(const char *name=NULL, int kind=0);
    PathRepair(const PathRepair& other);
    virtual ~PathRepair();
    PathRepair& operator=(const PathRepair& other);
    virtual PathRepair *dup() const {return new PathRepair(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getType() const;
    virtual void setType(int type);
    virtual MACAddress& getSrcMACAddress();
    virtual const MACAddress& getSrcMACAddress() const {return const_cast<PathRepair*>(this)->getSrcMACAddress();}
    virtual void setSrcMACAddress(const MACAddress& srcMACAddress);
    virtual MACAddress& getDestMACAddress();
    virtual const MACAddress& getDestMACAddress() const {return const_cast<PathRepair*>(this)->getDestMACAddress();}
    virtual void setDestMACAddress(const MACAddress& destMACAddress);
    virtual simtime_t getRepairTime() const;
    virtual void setRepairTime(simtime_t repairTime);
    virtual MACAddress& getRepairSwitch();
    virtual const MACAddress& getRepairSwitch() const {return const_cast<PathRepair*>(this)->getRepairSwitch();}
    virtual void setRepairSwitch(const MACAddress& repairSwitch);
    virtual MACAddressVector& getRepairMACAddresses();
    virtual const MACAddressVector& getRepairMACAddresses() const {return const_cast<PathRepair*>(this)->getRepairMACAddresses();}
    virtual void setRepairMACAddresses(const MACAddressVector& repairMACAddresses);
};

inline void doPacking(cCommBuffer *b, PathRepair& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, PathRepair& obj) {obj.parsimUnpack(b);}


#endif // _PATHREPAIR_M_H_
