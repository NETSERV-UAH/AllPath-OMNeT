[General]
network = arppathbridgesunidireccional.src.topologies.rombo

#seed
#Prueba ARP Request
#**.relayUnit.broadcastSeed = 12 #(same port: 4,5,11) #(different port: 12 -arriba y luego abajo; queda arriba-)
**.relayUnit.broadcastSeed = 12 #(same port: ) #(different port: 12 -arriba y luego abajo; queda arriba el camino hacia host1-)

#tiempo de simulación:			
sim-time-limit = 5s

#statistics
#**.statsTime = 10000s

#tiempo de bloqueo:			
**.relayUnit.blockingTime = 1s			
#tiempo de aprendizaje:			
**.relayUnit.agingTime = 120s

**.relayUnit.addressTableSize = 100
**.relayUnit.bufferSize = 1MiB
**.relayUnit.highWatermark = 512KiB
**.relayUnit.pauseUnits = 300 
**.relayUnit.addressTableFile = ""
**.relayUnit.numCPUs = 1
**.relayUnit.processingTime = 2us

# Queues
**.ppp[*].queueType = "DropTailQueue"
**.ppp[*].queue.frameCapacity = 10
**.eth[*].queueType = "DropTailQueue"

**.host1.eth[*].mac.address = "00-00-00-00-00-01"
**.host2.eth[*].mac.address = "00-00-00-00-00-02"
**.host3.eth[*].mac.address = "00-00-00-00-00-03"
**.switchA.relayUnit.address = "00-00-00-00-01-0A"
**.switchB.relayUnit.address = "00-00-00-00-01-0B"
**.switchC.relayUnit.address = "00-00-00-00-01-0C"

#Prueba 1 - ARP-Path v3 (ARP Request condicionado - aprende sólo si...)
#**.host1.numUdpApps = 2
#**.host1.udpApp[*].typename = "UDPBasicAppNew"
#**.host1.udpApp[*].sendInterval = exponential(50ms) #uniform (30s, 120s)
#**.host1.udpApp[*].messageLength = 500B #exponential(${50B,300B,600B,900B},${0})     #1000B/5ms = 1,6Mbps
#Primero emite 1 a 2
#**.host1.udpApp[0].startTime = 1s #host{13..25}.udpApp[*].startTime = exponential (4s)
#**.host1.udpApp[0].destAddresses = "host2"
#**.udpApp[0].destPort = 1000
#**.udpApp[0].localPort = 1000
#Segundo emite 1 a 3
#**.host1.udpApp[1].startTime = 2s #host{13..25}.udpApp[*].startTime = exponential (4s)
#**.host1.udpApp[1].destAddresses = "host3"
#**.udpApp[1].destPort = 1001
#**.udpApp[1].localPort = 1001

#Prueba 2 - ARP-Path v3 (ARP Reply condicionado - nunca aprende)
**.host2.numUdpApps = 1
**.host3.numUdpApps = 1
**.host2.udpApp[*].typename = "UDPBasicAppNew"
**.host2.udpApp[*].sendInterval = exponential(50ms) #uniform (30s, 120s)
**.host2.udpApp[*].messageLength = 500B #exponential(${50B,300B,600B,900B},${0})     #1000B/5ms = 1,6Mbps
**.host3.udpApp[*].typename = "UDPBasicAppNew"
**.host3.udpApp[*].sendInterval = exponential(50ms) #uniform (30s, 120s)
**.host3.udpApp[*].messageLength = 500B #exponential(${50B,300B,600B,900B},${0})     #1000B/5ms = 1,6Mbps
#Primero emite 2 a 1
**.host2.udpApp[*].startTime = 1s #host{13..25}.udpApp[*].startTime = exponential (4s)
**.host2.udpApp[*].destAddresses = "host1"
**.host2.udpApp[*].destPort = 1000
**.host2.udpApp[*].localPort = 1000
#Segundo emite 3 a 1
**.host3.udpApp[*].startTime = 2s #host{13..25}.udpApp[*].startTime = exponential (4s)
**.host3.udpApp[*].destAddresses = "host1"
**.host3.udpApp[*].destPort = 1001
**.host3.udpApp[*].localPort = 1001


#Protocol version
**.protocolVersion = 3
#Repair version
**.repairType = 2
# con las 2 siguientes líneas se cae el enlace entre A y B entre los segundos 2 y 3, y probamos v1:PathRequest+PathReply; v2:PathFail+PathRequest (desde host1) y PathFail+PathRequest (desde host2)
#**.switchA.**.portLinkDown = "1:2-3" 
#**.switchB.**.portLinkDown = "1:2-3" 


