//
// Generated file, do not edit! Created by nedtool 5.2 from src/linklayer/ethernet/ARPPathSwitch/LinkFailPkt.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __INET_LINKFAILPKT_M_H
#define __INET_LINKFAILPKT_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0502
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// cplusplus {{
#include "inet/linklayer/common/MACAddress.h"
//#include "inet/linklayer/ethernet/EtherFrame_m.h"
// }}


namespace inet {

/**
 * Class generated from <tt>src/linklayer/ethernet/ARPPathSwitch/LinkFailPkt.msg:31</tt> by nedtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * packet LinkFailPkt //extends EtherFrame 
 * {
 *     MACAddress addresses[];
 * }
 * </pre>
 */
class LinkFailPkt : public ::omnetpp::cPacket
{
  protected:
    MACAddress *addresses; // array ptr
    unsigned int addresses_arraysize;

  private:
    void copy(const LinkFailPkt& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const LinkFailPkt&);

  public:
    LinkFailPkt(const char *name=nullptr, short kind=0);
    LinkFailPkt(const LinkFailPkt& other);
    virtual ~LinkFailPkt();
    LinkFailPkt& operator=(const LinkFailPkt& other);
    virtual LinkFailPkt *dup() const override {return new LinkFailPkt(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual void setAddressesArraySize(unsigned int size);
    virtual unsigned int getAddressesArraySize() const;
    virtual MACAddress& getAddresses(unsigned int k);
    virtual const MACAddress& getAddresses(unsigned int k) const {return const_cast<LinkFailPkt*>(this)->getAddresses(k);}
    virtual void setAddresses(unsigned int k, const MACAddress& addresses);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const LinkFailPkt& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, LinkFailPkt& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_LINKFAILPKT_M_H

