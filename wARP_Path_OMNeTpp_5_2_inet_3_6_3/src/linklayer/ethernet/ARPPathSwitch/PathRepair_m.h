//
// Generated file, do not edit! Created by nedtool 5.2 from src/linklayer/ethernet/ARPPathSwitch/PathRepair.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __INET_PATHREPAIR_M_H
#define __INET_PATHREPAIR_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0502
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// cplusplus {{
#include <vector>
//#include <sys/types.h>
#include "inet/linklayer/ethernet/EtherFrame_m.h"
#include "inet/linklayer/common/MACAddress.h"
//typedef std::vector<MACAddress> MACAddressVector;
// }}


namespace inet {

// cplusplus {{
typedef std::vector<MACAddress> MACAddressVector;
// }}

/**
 * Enum generated from <tt>src/linklayer/ethernet/ARPPathSwitch/PathRepair.msg:33</tt> by nedtool.
 * <pre>
 * //Types of repair messages for ARP-Path
 * enum RepairMessageType
 * {
 * 
 *     Hello = 1; 			//Hello message (from switch to switch)		--Repair 1/2
 *     PathFail = 2; 		//PathFail message (broadcast - BT)			--Repair 1/2
 *     PathRequest = 3; 	//PathRequest message (broadcast - LT)		--Repair 1/2
 *     PathReply = 4;		//PathReply message (unicast - LT)			--Repair 1/2
 *     LinkFail = 5;		//LinkFail message, which can contain several addresses ~ several PathFail messages (broadcast - LT)	--Repair 3
 *     LinkReply = 6;		//LinkReply message, which can contain several addresses ~ several PathReply messages (unicast - LT)	--Repair 3
 * }
 * </pre>
 */
enum RepairMessageType {
    Hello = 1,
    PathFail = 2,
    PathRequest = 3,
    PathReply = 4,
    LinkFail = 5,
    LinkReply = 6
};

/**
 * Class generated from <tt>src/linklayer/ethernet/ARPPathSwitch/PathRepair.msg:47</tt> by nedtool.
 * <pre>
 * //PathRepair message fields:
 * //	- Type (RepairMessageType)
 * //	- Source MAC address
 * //	- Destination MAC address
 * message PathRepair extends EtherFrame //EtherFrameWithLLC en la version antigua
 * {
 *     int type \@enum(RepairMessageType);		//Message type
 *     MACAddress srcMACAddress;				//Address to be learnt (repairType == 1 || 2)
 *     MACAddress destMACAddress;				//Address to be learnt in the following step (if applicable, i.e. repairType == 1)
 *     simtime_t repairTime;					//Contains the repairTime of any previous repair message (repairTime is always zero for Hello/PathFail messages)
 *     MACAddress repairSwitch;				//Address to which forward all LinkReply messages (address of the switch that originated the repair)
 *     MACAddressVector repairMACAddresses;	//Group of addresses to be learnt/repaired (repairType == 3)
 * }
 * </pre>
 */
class PathRepair : public ::inet::EtherFrame
{
  protected:
    int type;
    MACAddress srcMACAddress;
    MACAddress destMACAddress;
    ::omnetpp::simtime_t repairTime;
    MACAddress repairSwitch;
    MACAddressVector repairMACAddresses;

  private:
    void copy(const PathRepair& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const PathRepair&);

  public:
    PathRepair(const char *name=nullptr, short kind=0);
    PathRepair(const PathRepair& other);
    virtual ~PathRepair();
    PathRepair& operator=(const PathRepair& other);
    virtual PathRepair *dup() const override {return new PathRepair(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getType() const;
    virtual void setType(int type);
    virtual MACAddress& getSrcMACAddress();
    virtual const MACAddress& getSrcMACAddress() const {return const_cast<PathRepair*>(this)->getSrcMACAddress();}
    virtual void setSrcMACAddress(const MACAddress& srcMACAddress);
    virtual MACAddress& getDestMACAddress();
    virtual const MACAddress& getDestMACAddress() const {return const_cast<PathRepair*>(this)->getDestMACAddress();}
    virtual void setDestMACAddress(const MACAddress& destMACAddress);
    virtual ::omnetpp::simtime_t getRepairTime() const;
    virtual void setRepairTime(::omnetpp::simtime_t repairTime);
    virtual MACAddress& getRepairSwitch();
    virtual const MACAddress& getRepairSwitch() const {return const_cast<PathRepair*>(this)->getRepairSwitch();}
    virtual void setRepairSwitch(const MACAddress& repairSwitch);
    virtual MACAddressVector& getRepairMACAddresses();
    virtual const MACAddressVector& getRepairMACAddresses() const {return const_cast<PathRepair*>(this)->getRepairMACAddresses();}
    virtual void setRepairMACAddresses(const MACAddressVector& repairMACAddresses);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PathRepair& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PathRepair& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_PATHREPAIR_M_H

